name: App
on:
  push:
    branches:
      - main
      - test
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - ".idea/**"
      - "docs/**"
      - "**.md"
  pull_request:
    branches:
      - main

env:
  JAVA_VERSION: "11"

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: ${{ env.JAVA_VERSION }}
      - run: ./gradlew check --no-daemon --stacktrace

  deploy:
    name: Deploy
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_EC2_SG_ID: ${{ secrets.AWS_EC2_SG_ID }}
      API_DEPLOYMENT_PATH: /tmp/noice-api

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install prerequisites
        run: |
          sudo apt-get -qq update -y
          sudo apt-get -qq install -y awscli

      - name: Build API jar
        run: |
          export BUILD_VERSION="${GITHUB_REF/'refs/tags/v'/''}-${GITHUB_SHA::7}"
          ./gradlew bootJar --no-daemon --stacktrace

      - name: Prepare 'api.properties' and 'android-publisher-api-key.json'
        run: |
          rm -rf conf && mkdir conf
          echo "$API_PROPERTIES" > conf/api.properties
          echo "$ANDROID_PUBLISHER_API_KEY_JSON" > conf/android-publisher-api-key.json
        env:
          API_PROPERTIES: ${{ secrets.API_PROPERTIES }}
          ANDROID_PUBLISHER_API_KEY_JSON: ${{ secrets.ANDROID_PUBLISHER_API_KEY_JSON }}

      - name: Get workflow runner's public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Authorize runner's SSH access to EC2 host
        run: |
          aws ec2 authorize-security-group-ingress --group-id "$AWS_EC2_SG_ID" \
            --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload API deployment files to EC2 host
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          source: build/libs/api.jar,scripts/noice-api.service,conf/*
          target: ${{ env.API_DEPLOYMENT_PATH }}
          rm: true

      - name: Configure API deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            sudo systemctl stop noice-api.service || true
            sudo rm -rf /usr/local/share/noice /etc/noice

            sudo mkdir -p /var/log/noice
            sudo chown -R nobody:nogroup /var/log/noice

            sudo mv ${{ env.API_DEPLOYMENT_PATH }}/build/libs /usr/local/share/noice
            sudo chown -R nobody:nogroup /usr/local/share/noice
            sudo chmod -R a=rx,u=rwx /usr/local/share/noice

            sudo mv ${{ env.API_DEPLOYMENT_PATH }}/conf /etc/noice
            sudo chown -R nobody:nogroup /etc/noice
            sudo chmod -R a=x,u=rwx /etc/noice

            sudo mv ${{ env.API_DEPLOYMENT_PATH }}/scripts/noice-api.service /etc/systemd/system/noice-api.service
            sudo systemctl daemon-reload
            sudo systemctl enable noice-api.service
            sudo systemctl restart noice-api.service

      - name: Revoke runner's SSH access from EC2 host
        if: ${{ always() }}
        run: |
          aws ec2 revoke-security-group-ingress --group-id "$AWS_EC2_SG_ID" \
            --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Clean up deployment config files from the runner
        if: ${{ always() }}
        run: rm -rf conf
