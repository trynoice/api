logging.level.root=warn
logging.level.com.trynoice.api=info

server.shutdown=graceful
server.forward-headers-strategy=native

spring.application.name=noice-backend-api

spring.jpa.open-in-view=false
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.resources.add-mappings=false
spring.mvc.throw-exception-if-no-handler-found=true
spring.jackson.default-property-inclusion=NON_NULL

management.endpoints.web.exposure.include=*

springdoc.swagger-ui.enabled=false
springdoc.api-docs.enabled=false
springdoc.override-with-generic-response=false
springdoc.writer-with-order-by-keys=true

# enable production-only schema migrations.
spring.flyway.locations=classpath:db/migration/common,classpath:db/migration/production

# PostgreSQL server connection configuration.
spring.datasource.url=
spring.datasource.username=
spring.datasource.password=

# HTTP port for the API server.
server.port=80

# GCP project id for listening to Google Play subscription events using GCP
# Cloud pub/sub.
spring.cloud.gcp.project-id=

# Path of a Spring Resource that is a GCP service account key for subscribing to
# Google Play Subscription events using GCP Cloud pub/sub, e.g.
# `file:/etc/noice-api/service-account-key.json`.
spring.cloud.gcp.credentials.location=

# Comma-separated list of allowed origin patterns for CORS.
#  - `https://*.domain1.com` allows all endings with `domain1.com`.
#  - `https://*.domain1.com:[8080,8081]` allows all endings with `domain1.com`
#    on port 8080 or 8081.
#  - `https://*.domain1.com:[*]` allows all endings with `domain1.com` on all
#    ports (including the default port).
#
# See https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html#setAllowedOriginPatterns-java.util.List-
app.cors.allowed-origins=

# HMAC secret key for signing refresh and access tokens.
app.auth.hmac-secret=

# Expiration period for refresh tokens.
app.auth.refresh-token-expiry=7d

# Expiration period for access tokens.
app.auth.access-token-expiry=30m

# Expiration period for sign-in tokens (short-lived refresh tokens).
app.auth.sign-in-token-expiry=15m

# Maximum duration for blacklisting an email from making sign-in attempts. If an
# email makes too many incomplete sign-in attempts, the API server blacklists it
# for a certain duration. The duration is calculated exponentially.
app.auth.sign-in-reattempt-max-delay=6h

# The domain to use when setting new cookie values if the client passes refresh
# and access tokens using cookies.
app.auth.cookie-domain=

# Sign-in token dispatch strategy to use. Available options are:
#  - `console`: prints the sign-in token to `stdout`. Useful during development.
#  - `email`: delivers the sign-in token to the requested email using AWS SES.
app.auth.sign-in-token-dispatcher-type=email

# Email `From` header when sending sign-in emails.
app.auth.sign-in-token-dispatcher.email.from=Noice <sign-in@trynoice.com>

# Email `Subject` line when sending sign-in emails.
app.auth.sign-in-token-dispatcher.email.subject=Sign-in Link

# Android application id to use when interacting with the Google Play Developers
# API.
app.subscriptions.android-application-id=com.github.ashutoshgngwr.noice

# Path of a service account key for accessing the Google Play Developers API.
# The service account must have access to manage subscriptions on Google Play,
# e.g. `/etc/noice-api/service-account-key.json`.
app.subscriptions.google-play-api-key-path=

# Name (only the last part) of a GCP Cloud Pub/Sub subscription to pull Google
# Play subscription events.
app.subscriptions.gcp-pubsub-sub-name=

# Whether to enable test-mode for Google Play subscriptions. If `true`, the
# server only processes test purchases (made using Google Play accounts that are
# registered as testers). If `false`, the server will only process live purchase
# and ignore test-purchases.
app.subscriptions.google-play-test-mode-enabled=false

# API key for interacting with the Stripe API.
app.subscriptions.stripe-api-key=

# Webhook secret for verifying webhook payload received from Stripe.
app.subscriptions.stripe-webhook-secret=

# TTL for an internal in-memory cache maintained by the subscription service.
app.subscriptions.cache-ttl=5m

# Refresh interval for foreign exchange rates (in milliseconds).
app.subscriptions.foreign-exchange-rate-refresh-interval-millis=3600000

# S3 bucket prefix where the sound library is hosted (excluding the library
# version). e.g. if the current library version is hosted at
# `s3://bucket-name/v0.1.0`, then this value should be `s3://bucket-name`.
app.sounds.library-s3-prefix=

# TTL for an internal in-memory cache maintained by the library repository.
app.sounds.library-cache-ttl=5m

# Comma-separated list of basenames of (segment) tracks that are available to
# stream for free. e.g. if a segment has 4 tracks with different audio quality,
# i.e., 128k.mp3, 192k.mp3, 256k.mp3 and 320k.mp3, then it is the basenames of
# the tracks that are free to stream (without subscription) (e.g. `128k, 256k`).
app.sounds.free-bitrates=128k
